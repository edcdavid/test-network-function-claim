package main

import (
	"fmt"
	"github.com/a-h/generate"
	igenerate "github.com/redhat-nfvpe/test-network-function-claim/internal/generate"
	"io"
	"os"
	"path"
	"time"
)

const (
	claimSchemaFile                      = "claim-schema.json"
	claimSchemaGoPackage                 = "claim"
	errorGeneratingGenericSchemaExitCode = 1
	errorGettingOverrideConfig           = 2
	errorApplyingOverrideConfig          = 3
	errorWritingOutput                   = 4
	overrideFileLocation                 = "override.json"
)

var (
	inputFiles   = []string{claimSchemaFile}
	outputGoFile = path.Join("pkg", "claim", "schema.go")
)

func prependCustomCodeGenerationMessage(w io.Writer) error {
	currentTime := time.Now()
	msg := []string{
		"//",
		"// Code generated by `test-network-function-claim/cmd/generate/generate.go` on: " + currentTime.String(),
		"//",
		"// `https://github.com/a-h/generate` provides a generic set of interfaces to convert JSON schema into",
		"// workable GoLang struct implementations.  However, the code generator is limited and does not allow",
		"// type remapping.  By default, JSON Schema \"object\" types are remapped to custom struct definitions.",
		"// This becomes a problem in our case, as we do not define certain facets such as \"Hosts\" or",
		"// \"LshwOutput\".  This CLI driven generator augments the stock generator to allow overrides to generic",
		"// \"map[string]interface{}\", which is capable of representing arbitrary JSON data.",
		"//",
		"// Warning:  Do not edit this file by hand.  Instead, use Makefile targets.",
		"//",
		"",
	}
	for _, line := range msg {
		_, err := fmt.Fprintln(w, line)
		if err != nil {
			return err
		}
	}
	return nil
}

func fatalError(err error, code int) {
	fmt.Fprintf(os.Stderr, "Fatal error: %v\n", err)
	os.Exit(code)
}

func main() {
	g, w, err := igenerate.New(outputGoFile, inputFiles...)
	if err != nil {
		fatalError(err, errorGeneratingGenericSchemaExitCode)
	}

	overrideConfig, err := igenerate.GetOverrideConfig(overrideFileLocation)
	if err != nil {
		fatalError(err, errorGettingOverrideConfig)
	}

	err = igenerate.ApplyOverrideConfiguration(g, overrideConfig)
	if err != nil {
		fatalError(err, errorApplyingOverrideConfig)
	}

	err = prependCustomCodeGenerationMessage(w)
	if err != nil {
		fatalError(err, errorWritingOutput)
	}

	generate.Output(w, g, claimSchemaGoPackage)
}
